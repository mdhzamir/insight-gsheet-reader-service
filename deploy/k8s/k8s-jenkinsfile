pipeline {
    agent any

    parameters {
        choice(choices: ['test-env','industry-4-0'], description: 'Select Deploy Environment?', name: 'K8S_NAMESPACE')
        }

    environment {
        REGISTRY="203.188.245.212:7800"
        DEPLOYMENT_ENV="k8s"
        IMAGE_CREATED_BY="jenkins"
        PROJECT_NAME="insight-gsheet-reader-service"
        K8S_CLUSTER_PORT="5001"
        
        GIT_TAG=sh(returnStdout: true, script: '''
            COMMIT_ID=$(git log -1|head -1|awk -F ' ' '{print $NF}')
            echo $(git show-ref --tag | grep $COMMIT_ID | awk -F '/' '{print $NF}')
        ''').trim()
     
        //Host specific configuration
        M2_REPO="/home/kubernet/.m2/"

        DEPLOYMENT_ENV_VERSION="$K8S_NAMESPACE"


        PROJECT_LOCATION="$JENKINS_DATA_LOCATION/workspace/$JOB_NAME"
        IMAGE_VERSION="$BUILD_NUMBER-$IMAGE_CREATED_BY-$GIT_TAG-$DEPLOYMENT_ENV_VERSION"
        DOCKER_TAG="$REGISTRY/$PROJECT_NAME:$IMAGE_VERSION"
        DEPLOYMENT_DIRECTORY="./deploy/$DEPLOYMENT_ENV"
        
        //k8s cluster specific configuration
        K8S_SERVICE_NAME="$PROJECT_NAME"
        K8S_CHANGE_CAUSE="$IMAGE_VERSION"

        K8S_NODE_PORT=sh(returnStdout: true, script: '''    
                if [ $K8S_NAMESPACE == "industry-4-0" ]
                then
                    echo ""
                else
                    echo "32501"
                fi
            '''
        ).trim()

    }

    stages {        
        stage('Init') {
            steps {
                sh '''
                COMMIT_ID=$(git log -1|head -1|awk -F ' ' '{print $NF}')
                commit_count=$(echo -n $(git show-ref --tag | grep $COMMIT_ID | awk -F '/' '{print $NF}'|wc -l))
                if [[ $commit_count -eq 1 ]]
                then
                    echo $(git show-ref --tag | grep $COMMIT_ID | awk -F '/' '{print $NF}') 
                else
                    echo ERROR: Duplicate commit id for $(git show-ref --tag | grep $COMMIT_ID | awk -F '/' '{print $NF}') 
                    exit 1 # terminate and indicate error
                fi                
                '''
            }
        }    
    
        stage('Test') {
            steps {
                sh '''
                echo "Node port value -------->$K8S_NODE_PORT"
                '''
            }
        }
          
      stage('Build Docker Image') {
            steps {
                sh '''
                echo "Building docker $DOCKER_TAG image"
                docker build -f $DEPLOYMENT_DIRECTORY/k8s.Dockerfile -t $DOCKER_TAG .
                docker images|grep $PROJECT_NAME
                '''
            }
        }  
      
      stage('Push to Docker Registry') {
            steps {
                echo "Pushting to docker registry $DOCKER_TAG image"
                sh 'docker push $DOCKER_TAG'
            }
        }

      stage('Deleted image from local after upload to Registry') {
            steps {
                echo "Cleaning local docker registry $DOCKER_TAG image"
                sh 'docker rmi $DOCKER_TAG'
            }
        }
      
     stage('Deploy Pod') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/k8s-deployment.yaml | xargs -I{} echo {}
                envsubst < $DEPLOYMENT_DIRECTORY/k8s-deployment.yaml | kubectl apply -f -
                '''
            }
        }
     stage('Deploy service') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/$K8S_NAMESPACE-k8s-service.yaml | xargs -I{} echo {}
                envsubst < $DEPLOYMENT_DIRECTORY/$K8S_NAMESPACE-k8s-service.yaml | kubectl apply -f -
                '''
            }
        }                                     
    }
}

